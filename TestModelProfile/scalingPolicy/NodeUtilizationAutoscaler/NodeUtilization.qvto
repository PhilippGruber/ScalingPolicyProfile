/**
*  This node utilization, has the target to scale based on the node utilization
*
*
*/

import org.palladiosimulator.simulizar.action.repository.black.SimulationStateLibrary;
import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;

modeltype ECORE uses "http://www.eclipse.org/emf/2002/Ecore";
modeltype PRM uses "http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0";
modeltype PCM_ALLOC uses "http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2";
modeltype PCM_SYS uses "http://palladiosimulator.org/PalladioComponentModel/System/5.2";
modeltype PCM_REP uses "http://palladiosimulator.org/PalladioComponentModel/Repository/5.2";
modeltype PCM_SEFF uses "http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2";

modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_ASSEMBLY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype SEFF_PERFORMANCE uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/SEFF_Performance/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_SYSTEM uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';


transformation nodeUtilization( in prm:PRM, inout pcmAllocation:PCM_ALLOC )
extends library SimulationStateLibrary
extends library ProfilesLibrary
{
	property overallResponseTimeMeasurementSpecId: String = '_YPL2EMVuEeiBxvBce3av2w';
	property overallUtilizationId: String = '_QIb6cikUEeSuf8LV7cHLgA';
	//property numberOfScaleActions: Integer = 0;
	
	property crprtProfile: String = 'ScalingPolicyProfile';
	property crprtStereotype: String = 'ScalingPolicySystem';

	
	// properties 
	
	// The utilization thresholds
//	property upperThreshold: Real = 0.8;
//	property lowerThreshold: Real = 0.3;
	// aus debug gruenden
	property upperThreshold: Real = 0.02; 
	property lowerThreshold: Real = 0.01;
	
	// brauche ich das?
	// policy tagged values
	property scaledUnitsTaggedValue: String = 'scaledUnits';
	property lastScalingDecisionTagged : String =  "lastScalingDecision";
	
	property testTaggedValue : String = 'Test';
	
	// constraints 
	// MAX NUMBER OF REPLICAS
	property boundedNumberOfResourceContainers : Integer = 4;
	// Duration COOLDOWN SCALE OUT
	property quiescencePeriod : EDouble = 120;
	
	property Profile : String = "ScalingPolicyProfile";
	property Stereotype : String = "ScalingPolicySystem";
	
	// Context koennte niccht funktionieren, weil ich nach system frage, obwohl es den assembly context markiert
	
	main(){
	
		var prms:Set(PRM::RuntimeMeasurement) := prm.objectsOfType(PRM::RuntimeMeasurement);
		log('Transformation rule [NodeUtilization] started ...');
		
		var allocation:allocation::Allocation := pcmAllocation.rootObjects()->selectOne(temp1:Stdlib::Element|allocation::Allocation);
	    var system:system::System := allocation.system_Allocation;
	    var appliedStereotype:String;
	    
	    // already applied
		//applyProfile(system.oclAsType(EObject), "ScalingPolicyProfile");
			
		//assert fatal(isProfileApplied(system.oclAsType(EObject), "ScalingPolicyProfile"))
		//with log ("The system has no " + Profile + " applied.");
		
		//assert fatal(hasAppliedStereotype(system, Stereotype))
		//with log ("The system is not a " + Stereotype + "!");	
		
		var currentScaledUnits:Integer := /*ProfilesLibrary.this*/getIntTaggedValue(system, /*scaleout.this*/scaledUnitsTaggedValue, /*scaleout.this*/Stereotype);
		log (currentScaledUnits.toString());
		
		//if (currentScaledUnits > 0){
		//	log ("Juhu");
		//};
		
		//var test : String := /*ProfilesLibrary.this*/getStringTaggedValue(system, /*scaleout.this*/testTaggedValue, /*scaleout.this*/Stereotype);
		//log (test);	
			
		switch {
		
			//case ((/*ProfilesLibrary.this*/hasAppliedStereotype(system, /*scaleout.this*/crprtStereotype))) do {log('Profile and stereotype found found') };	
			case ((/*ProfilesLibrary.this*/isProfileApplied(system.oclAsType(ECORE::EObject), /*scaleout.this*/crprtProfile) and (/*ProfilesLibrary.this*/hasAppliedStereotype(system, /*scaleout.this*/crprtStereotype)))) do {log('Profile and stereotype found found') };
			else do {assert fatal (/*ProfilesLibrary.this*/isProfileApplied(system.oclAsType(ECORE::EObject), /*scaleout.this*/crprtProfile)) with log((('The system has no '+(/*scaleout.this*/crprtProfile))+(' applied!'))) };
		};
		assert fatal ((prm.rootObjects()->xselect(temp2:Stdlib::Element|PRM::RuntimeMeasurement)->size()>(0))) with log('No Measurements found!');
		assert fatal ((pcmAllocation.rootObjects()->xselect(temp3:Stdlib::Element|allocation::Allocation)->size()>(0))) with log('Allocation Model is empty!');
		//Set {prms->any(temp4:PRM::RuntimeMeasurement|(temp4.measurementSpecification.id=(/*scaleout.this*/overallResponseTimeMeasurementSpecId)))}->xcollect(temp5:PRM::RuntimeMeasurement|temp5.checkConditionRM());	
			
				
		assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
		
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
		with log ("Allocation Model is empty!");

		prm.rootObjects()[RuntimeMeasurement]->checkCondition();
		
		log('Transformation rule [NodeUtilization] DONE.');
		//log(getSimulationTime().toString());
	}
	
	
	helper Set(RuntimeMeasurement) :: checkCondition() : Boolean {
		//var numberOfScaleActions: Integer = 0;
	
	
		self->forEach(measurement) {
		log('Measured value is ' + measurement.measuringValue.toString());
		//log('Total scale out actions executed '+ numberOfScaleActions.toString());
		
			if (measurement.measuringValue > upperThreshold) {
				//numberOfScaleActions := numberOfScaleActions+1;
				pcmAllocation.rootObjects()[Allocation]->forAll(
					allocation : Allocation | 
					scaleUp(allocation.allocationContexts_Allocation)
				);
				
				return true;
			}
			// and getSimulationTime()>lastScalingDecision+quiescencePeriod
			elif ((measurement.measuringValue < lowerThreshold) and (getSimulationTime()>100.0)){
				log(getSimulationTime().toString());
				
				//switch {
				//case (currentScaledUnits = 0) do {
				
				pcmAllocation.rootObjects()[Allocation]->forAll(
					allocation : Allocation | 
					scaleDown(allocation.allocationContexts_Allocation)
				);
				
				return true;
			};
	    }; 
	    
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
	}
	
	helper scaleUp(allocationContexts : Set(AllocationContext)) : Boolean {
			
		/**
		 * This implements a scale down action, from equal branch probability of 0.5 to both servers, it shifts to 1. 
		 * That results in only one "server" used instead of two. 
		 * 
		 * Here for all SEFF that are "implemented", that which are not yet defined are missing (e.g. data provider)
		 * 
		 * TODO scale in and maybe a bit more advanced logic 
		 */
	
		// Anzahl an Context innerhalb des Allocation models
		log('Found ' +  allocationContexts->size().toString() + ' AllocationContexts');
		
		allocationContexts->forEach(allocation){

			// LoadBalancer in the system diagram
			if( allocation.assemblyContext_AllocationContext.id = "_xVklADNAEeyPWbxO93gewA" ) {
			log('found load balancer: AC_LoadBalancer');
				allocation.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent->forEach(seff) {
					if(seff.oclIsTypeOf(ResourceDemandingSEFF)) {
						
						/**
						 * Does it for send TelemetryData (Dervice Com)
						 */
						
						//name of branch: delegateToServer2
						var branch2 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_j9nFYDNAEeyPWbxO93gewA");
						if(branch2.branchProbability = 0.0) {
					
							branch2.branchProbability := 0.5;
							log('Set branchProbability to ' + branch2.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch1 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_bqFI8DNAEeyPWbxO93gewA");
						if(branch1.branchProbability = 1.0) {
					
							branch1.branchProbability := 0.5;
							log('Set branchProbability to ' + branch1.branchProbability.toString());
							return true;
						};
						
						/**
						 * Does it for set online (Dervice Com)
						 */
						
						//name of branch: delegateToServer2
						var branch22 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_Qb3HkDNBEeyPWbxO93gewA");
						if(branch22.branchProbability = 0.0) {
							
							branch22.branchProbability := 0.5;
							log('Set branchProbability to ' + branch22.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch11 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_OFshcDNBEeyPWbxO93gewA");
						if(branch11.branchProbability = 1.0) {
							
							branch11.branchProbability := 0.5;
							log('Set branchProbability to ' + branch11.branchProbability.toString());
							return true;
						};
						
						/**
						 * Does it for on set offline (Device Com)
						 */
						
						//name of branch: delegateToServer2
						var branch222 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_l7OMIDNBEeyPWbxO93gewA");
						if(branch222.branchProbability = 0.0) {
							
							branch222.branchProbability := 0.5;
							log('Set branchProbability to ' + branch222.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch111 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_j2waADNBEeyPWbxO93gewA");
						if(branch111.branchProbability = 1.0) {
							
							branch111.branchProbability := 0.5;
							log('Set branchProbability to ' + branch111.branchProbability.toString());
																													
							return true;
						};
				
						
						/**
						 * Does it for on data available (Processing)
						 
						
		*				//name of branch: delegateToServer2
						var branch2222 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_TylIUCyJEeyw-cCjs3YUYw");
						if(branch2222.branchProbability = 0.0) {
							
							branch2222.branchProbability := 0.5;
							log('Set branchProbability to ' + branch2222.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch1111 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_KyHNYCyJEeyw-cCjs3YUYw");
						if(branch1111.branchProbability = 1.0) {
							
							branch1111.branchProbability := 0.5;
							log('Set branchProbability to ' + branch1111.branchProbability.toString());
							return true;
						};
						*/
					}
				}
			}
		};
		
		return false;
	}
	
	
	helper scaleDown(allocationContexts : Set(AllocationContext)) : Boolean {
		log("Test");

		allocationContexts->forEach(allocation){

			// LoadBalancer in the system diagram
			if( allocation.assemblyContext_AllocationContext.id = "_xVklADNAEeyPWbxO93gewA" ) {
			log('found load balancer: AC_LoadBalancer');
				allocation.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent->forEach(seff) {
					if(seff.oclIsTypeOf(ResourceDemandingSEFF)) {
						
						/**
						 * Does it for send TelemetryData (Dervice Com)
						 */
						
						//name of branch: delegateToServer2
						var branch2 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_j9nFYDNAEeyPWbxO93gewA");
						
						if(branch2.branchProbability > 0.0) {
						
							branch2.branchProbability := 0.0;
							
							log('Set branchProbability to ' + branch2.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch1 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_bqFI8DNAEeyPWbxO93gewA");
						if(branch1.branchProbability < 1.0) {
							
							branch1.branchProbability := 1.0;
							
							log('Set branchProbability to ' + branch1.branchProbability.toString());
							return true;
						};
						
						/**
						 * Does it for set online (Dervice Com)
						 */
						
						//name of branch: delegateToServer2
						var branch22 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_Qb3HkDNBEeyPWbxO93gewA");
						if(branch22.branchProbability > 0.0) {
							
							branch22.branchProbability := 0.0;
							log('Set branchProbability to ' + branch22.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch11 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_OFshcDNBEeyPWbxO93gewA");
						if(branch11.branchProbability < 1.0) {
							
							branch11.branchProbability := 1.0;
							log('Set branchProbability to ' + branch11.branchProbability.toString());
							return true;
						};
						
						/**
						 * Does it for on set offline (Device Com)
						 */
						
						//name of branch: delegateToServer2
						var branch222 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_l7OMIDNBEeyPWbxO93gewA");
						if(branch222.branchProbability > 0.0) {
							
							branch222.branchProbability := 0.0;
							log('Set branchProbability to ' + branch222.branchProbability.toString());
							return true;
						};
						//name of branch: delegateToServer1
						var branch111 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_j2waADNBEeyPWbxO93gewA");
						if(branch111.branchProbability < 1.0) {
							
							branch111.branchProbability := 1.0;
							log('Set branchProbability to ' + branch111.branchProbability.toString());
																													
							return true;
						};
				      }
				   }
				  } 
				};

		return false;
	}
	
	helper scaleOutToUnit2(allocationContexts : Set(AllocationContext)) : Boolean	{
		
		
	// var numberOfBranches : Real := self.branches_Branch[ProbabilisticBranchTransition]->size();
	//	branches_Branch[ProbabilisticBranchTransition]->forEach(branch) {	
	//		branch.branchProbability := 1.0 / numberOfBranches;
	//		log("Branch name " + branch.entityName + " of Branch Action "+ self.id.toString() +" with probability " + branch.branchProbability.toString());
	//	};
		
	
		return false;
	}
	
}

