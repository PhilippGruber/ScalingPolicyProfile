import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCMEntity uses pcm::core::entity('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';


transformation ReverseLoadbalancing(in prm : PRM,inout pcmAllocation : PCM_ALLOC);

configuration property loadbalanced : Boolean;									
property listOfRootObjects : List(NamedElement);


main() {
	
	if(loadbalanced){
		var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
		var allocationContexts : Set(AllocationContext) := allocation.allocationContexts_Allocation;
		var assemblyContexts : Set(AssemblyContext);
		allocationContexts -> forEach(allocationContext){assemblyContexts += allocationContext.assemblyContext_AllocationContext;};
		assert fatal(appliedStereotypesEqualsOne(assemblyContexts,"LoadbalancerAssemblyContext"))
			with log ("There is more than one LoadbalancerAssemblyContext Stereotype Application!");	
			
		//get the LoadbalancerAssemblyContext stereotyped AssemblyContext
		var loadBalancerAssemblyContext : AssemblyContext := assemblyContexts -> selectOne(assemblyContext : AssemblyContext |
						hasAppliedStereotype(assemblyContext,"LoadbalancerAssemblyContext"));
				
		assert fatal(loadBalancerAssemblyContext != null)
			with log ("There is no LoadbalancerAssemblyContext Stereotype Application!");	
				
		var system : System := allocation.system_Allocation;
		var repository : Repository := assemblyContexts->any(true).encapsulatedComponent__AssemblyContext.repository__RepositoryComponent;
		var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
		listOfRootObjects ->add(allocation);
		listOfRootObjects ->add(resourceEnvironment);	
		listOfRootObjects ->add(system);
		listOfRootObjects ->add(repository);	
		
		var loadbalancerRepositoryComponent : RepositoryComponent := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
		var duplicateAssemblyContexts : Set(AssemblyContext);
		var originalAssemblyContext : AssemblyContext;
		var resourceContainer : ResourceContainer;
		allocationContexts -> forEach(allocationContext){
			if(hasAppliedStereotype(allocationContext.assemblyContext_AllocationContext,"DuplicateAssemblyContext")){
				duplicateAssemblyContexts += allocationContext.assemblyContext_AllocationContext;
				removeStereotypeApplications(allocationContext.assemblyContext_AllocationContext,"DuplicateAssemblyContext");
				resourceContainer := allocationContext.resourceContainer_AllocationContext;
				removeResourceContainer(resourceContainer);
				removeAllocationContext(allocationContext);
			}
			else if(hasAppliedStereotype(allocationContext.assemblyContext_AllocationContext,"OriginalAssemblyContext")){
				originalAssemblyContext := allocationContext.assemblyContext_AllocationContext;
			}
			else if(hasAppliedStereotype(allocationContext.assemblyContext_AllocationContext,"LoadbalancerAssemblyContext")){
				removeStereotypeApplications(allocationContext.assemblyContext_AllocationContext,"LoadbalancerAssemblyContext");
				resourceContainer := allocationContext.resourceContainer_AllocationContext;
				removeResourceContainer(resourceContainer);
				removeAllocationContext(allocationContext);
		}
	};

	removeLinkingResource(resourceEnvironment.linkingResources__ResourceEnvironment);
	
	reverseSystem(duplicateAssemblyContexts, originalAssemblyContext, loadBalancerAssemblyContext);
	reverseRepository(loadbalancerRepositoryComponent);
	};
}

/**
 * Remove a LinkingResource when it is connected with only one ResourceContainer
 */
helper removeLinkingResource(linkingResources : Set(LinkingResource)){
	linkingResources->forEach(linkingResource){
		var connectedResourceContainer : Set(ResourceContainer) := linkingResource.connectedResourceContainers_LinkingResource;
		if(connectedResourceContainer->size()<2){
			delete(listOfRootObjects,linkingResource);
		}
	};
	 
}

/**
 * Remove all Provided and RequiredRoles from the Loadbalancer RepositoryComponent and then remove the component
 */
helper reverseRepository(loadbalancerRepositoryComponent : RepositoryComponent){
	removeRepositoryComponent(loadbalancerRepositoryComponent);
}

/**
 * Remove the Loadbalancer AssemblyContext and all replicated AssemblyContexts from the System,update the Assembly 
 * and ProvidedDelegation or remove them, respectively
 */
helper reverseSystem(duplicateAssemblyContexts:Set(AssemblyContext), originalAssemblyContext : AssemblyContext, loadbalancerAssemblyContext : AssemblyContext){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	var connectors : Set(Connector) := system.connectors__ComposedStructure;
	var providingAssemblyContext : AssemblyContext;
	var originalAssemblyContextOperationProvidedRole : OperationProvidedRole;
	connectors->forEach(connector) {
		if(connector.oclIsTypeOf(AssemblyConnector)){
			var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
			var requiringAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyConnector);
			providingAssemblyContext := getProvidingAssemblyContext(assemblyConnector);
			if(duplicateAssemblyContexts ->includes(providingAssemblyContext) or 
				duplicateAssemblyContexts -> includes(requiringAssemblyContext) or 
				requiringAssemblyContext.id = loadbalancerAssemblyContext.id){
				removeAssemblyConnector(assemblyConnector);
			}
			else if(providingAssemblyContext.id = loadbalancerAssemblyContext.id){
				originalAssemblyContextOperationProvidedRole := originalAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity 
					->selectOne(providedRole : ProvidedRole | providedRole.oclAsType(OperationProvidedRole).providedInterface__OperationProvidedRole.id  = assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole.id).oclAsType(OperationProvidedRole);
				assemblyConnector.providingAssemblyContext_AssemblyConnector := originalAssemblyContext;
				assemblyConnector.providedRole_AssemblyConnector := originalAssemblyContextOperationProvidedRole;
			}
		}
		else if(connector.oclIsTypeOf(ProvidedDelegationConnector)){
			var providedDelegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);
			providingAssemblyContext := getProvidingAssemblyContext(providedDelegationConnector);
			if(providingAssemblyContext.id = loadbalancerAssemblyContext.id){
				originalAssemblyContextOperationProvidedRole := originalAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity 
					->selectOne(providedRole : ProvidedRole | providedRole.oclAsType(OperationProvidedRole).providedInterface__OperationProvidedRole.id = providedDelegationConnector.innerProvidedRole_ProvidedDelegationConnector.providedInterface__OperationProvidedRole.id).oclAsType(OperationProvidedRole);
				providedDelegationConnector.assemblyContext_ProvidedDelegationConnector := originalAssemblyContext;
				providedDelegationConnector.innerProvidedRole_ProvidedDelegationConnector := originalAssemblyContextOperationProvidedRole;
			}
		}	
	};
	removeAssemblyContext(loadbalancerAssemblyContext);
	duplicateAssemblyContexts -> forEach(duplicateAssembylContext){
		removeAssemblyContext(duplicateAssembylContext);
	}
	
};

/**
 * Remove the RepositoryComponent of the Repository Model
 */
helper removeRepositoryComponent(repositoryComponent: RepositoryComponent){
	delete(listOfRootObjects,repositoryComponent);
}

/**
 * Remove the AssemblyContext of the System Model
 */
helper removeAssemblyContext(assemblyContext: AssemblyContext){
	delete(listOfRootObjects,assemblyContext);
}

/**
 * Remove the AssemblyConnector of the System Model
 */
helper removeAssemblyConnector(assemblyConnector: AssemblyConnector){
	delete(listOfRootObjects,assemblyConnector);
}

/**
 * Remove the AllocationContext of the Allocation Model
 */
helper removeAllocationContext(allocationContext : AllocationContext){
	delete(listOfRootObjects,allocationContext);
}


/**
 * Remove the AllocationContext of the ResourceEnvironment Model
 */
helper removeResourceContainer(resourceContainer : ResourceContainer){
	delete(listOfRootObjects,resourceContainer); 
}

/**
 * Returns the requiring component of a given AssemblyConnector.
 */
query getRequiringAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.requiringAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given AssemblyConnector.
 */
query getProvidingAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given ProvidedDelegationConnector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
}

/**
 * Returns the providing component of a given RequiredDelegationConnector.
 */
query getRequiringAssemblyContext(requiredDelegationConnector : RequiredDelegationConnector) : AssemblyContext{
	return requiredDelegationConnector.assemblyContext_RequiredDelegationConnector;	
}
