import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';
modeltype PCMSEFF_PERFORMANCE uses pcm::seff::seff_performance('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2');
modeltype PCM_RESOURCETYPE uses pcm::resourcetype('http://palladiosimulator.org/PalladioComponentModel/5.2');

transformation Loadbalancing(inout pcmAllocation : PCM_ALLOC);

//String constants of the Static Assembly Context Loadbalancing Profile					   			 
property staticAssemblyContextLoadbalancingProfile : String = "StaticAssemblyContextLoadbalancingProfile";
property staticAssemblyContextLoadbalancingSystemStereotype : String = "StaticAssemblyContextLoadbalancingSystem";
property staticLoadbalancedAssemblyContextStereotype : String = "StaticLoadbalancedAssemblyContext";

//String constants of the Dynamic Horizontal Scaling Assembly Context  Profile	
property dynamicHorizontalScalingAssemblyContextProfile : String = "DynamicHorizontalScalingAssemblyContextProfile";
property dynamicHorizontalScalingAssemblyContextSystemStereotype : String = "DynamicHorizontalScalingAssemblyContextSystem";
property replicableAssemblyContextStereotype : String = "ReplicableAssemblyContext"; 

//String constants of the Dynamic Horizontal Scaling Assembly Context  and Static Assembly Context Loadbalancing Profile	
property numberOfReplicasTaggedValue : String = "numberOfReplicas";

//String constants of the Loadbalanced Profile	
property loadbalancedProfile : String = "LoadbalancedProfile";
property originalAssemblyContextStereotype : String = "OriginalAssemblyContext";
property loadbalancerAssemblyContextStereotype : String = "LoadbalancerAssemblyContext";
property duplicateAssemblyContextStereotype : String = "DuplicateAssemblyContext";


property numberOfReplicas : Integer;

main() {
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var allocationContexts : Set(AllocationContext) := allocation.allocationContexts_Allocation;
	var assemblyContexts : Set(AssemblyContext);
	allocationContexts -> forEach(allocationContext){assemblyContexts += allocationContext.assemblyContext_AllocationContext;};
	var system : System := allocation.system_Allocation;
	var appliedStereotype : String;
	
	if(isProfileApplied(system.oclAsType(EObject), dynamicHorizontalScalingAssemblyContextProfile) and
		hasAppliedStereotype(system, dynamicHorizontalScalingAssemblyContextSystemStereotype) and
		hasAppliedStereotype(assemblyContexts,replicableAssemblyContextStereotype)){
			appliedStereotype := replicableAssemblyContextStereotype;	
	}
	else{				
		assert fatal(isProfileApplied(system.oclAsType(EObject), staticAssemblyContextLoadbalancingProfile))
			with log ("The system has no " + staticAssemblyContextLoadbalancingProfile + " applied!");	
		
		assert fatal(hasAppliedStereotype(system,staticAssemblyContextLoadbalancingSystemStereotype))
			with log("The System is not a" + staticAssemblyContextLoadbalancingSystemStereotype + "!");
			
		if(hasAppliedStereotype(assemblyContexts,staticLoadbalancedAssemblyContextStereotype)){
				appliedStereotype := staticLoadbalancedAssemblyContextStereotype;
		};
	};

	
	//get the stereotyped AssemblyContext
	var loadBalancedAssemblyContext : AssemblyContext := assemblyContexts -> selectOne(assemblyContext : AssemblyContext |
					hasAppliedStereotype(assemblyContext,appliedStereotype));
					
	assert fatal(loadBalancedAssemblyContext != null)
		with log ("There is no Stereotype Application!");	
		
	assert fatal(appliedStereotypesEqualsOne(assemblyContexts,appliedStereotype))
		with log ("There is more than one Stereotype Application that defines a replicable Assembly!");	
		
	numberOfReplicas := getIntTaggedValue(loadBalancedAssemblyContext, numberOfReplicasTaggedValue, appliedStereotype);
	
	//apply Stereotype OriginalAssemblyContext from the Loadbalanced Profile. Needed when the system should be scaled in				
	if (not isProfileApplied(system.oclAsType(EObject), loadbalancedProfile)) {
		applyProfile(system.oclAsType(EObject), loadbalancedProfile);
	};
	applyStereotype(loadBalancedAssemblyContext, originalAssemblyContextStereotype);
	
	//remove Stereotype Application ReplicableAssemblyContext from the AssemblyContext
	//removeStereotypeApplications(loadBalancedAssemblyContext,"ReplicableAssemblyContext");
	
	var loadBalancedAllocationContext : AllocationContext := allocationContexts ->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext.id = loadBalancedAssemblyContext.id);
	
	var loadBalancedResourceContainer : ResourceContainer := loadBalancedAllocationContext.resourceContainer_AllocationContext;
	
	//create the LoadBalancer BasicComponent and AssemblyContext
	var loadBalancerComponent : RepositoryComponent := new BasicComponent(loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext);
	var loadBalancerAssemblyContext : AssemblyContext := new AssemblyContext(loadBalancerComponent);
	//apply Stereotype LoadbalancerAssemblyContext from the Loadbalanced Profile. Needed when the system should be scaled in				
	applyStereotype(loadBalancerAssemblyContext,loadbalancerAssemblyContextStereotype);	
	//duplicate the stereotyped AssemblyContext
	var duplicatedAssemblyContexts : OrderedSet(AssemblyContext) := createDuplicatedAssemblyContexts(loadBalancedAssemblyContext);
	
	//connect the LoadBalancer Assembly Context with the stereotyped and duplicated AssemblyContext in the System
	connectLoadBalancerAndAssemblyContexts(loadBalancedAssemblyContext,loadBalancerAssemblyContext,duplicatedAssemblyContexts);
	
	//create the ResourceContainer for the LoadBalancer and the duplicated AssemblyContext
	var loadBalancerResourceContainer : ResourceContainer := createResourceContainerAndConnectionToLinkingResources(loadBalancedResourceContainer,"LoadBalancer");
	var duplicatedComponentResourceContainer : OrderedSet(ResourceContainer) := createDuplicatedResourceContainer(loadBalancedResourceContainer,loadBalancedAllocationContext.entityName,duplicatedAssemblyContexts);
	
	//create the AllocationContexts for the LoadBalancer and the duplicated AssemblyContexts
	new AllocationContext(loadBalancerAssemblyContext,loadBalancerResourceContainer);
	duplicatedAssemblyContexts -> map createDuplicatedAllocationContexts(duplicatedComponentResourceContainer);
}

/**
 * Creates the ResourceContainer for all duplicated AssemblyContexts
 */
helper createDuplicatedResourceContainer(loadBalancedResourceContainer : ResourceContainer, loadBalancedAllocationContextEntityName : String, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)):OrderedSet(ResourceContainer){
	var i : Integer := 0;
	var duplicatedResourceContainer : OrderedSet(ResourceContainer);
	while(i<duplicatedAssemblyContextSet -> size()){
		duplicatedResourceContainer += createResourceContainerAndConnectionToLinkingResources(loadBalancedResourceContainer,loadBalancedAllocationContextEntityName);
		i := i+1;
	};
	
	return duplicatedResourceContainer;
}

/**
 * Creates the AllocationContexts for all duplicated AssemblyContexts and ResourceContainer
 */
mapping OrderedSet(AssemblyContext) :: createDuplicatedAllocationContexts(resourceContainer : OrderedSet(ResourceContainer)):OrderedSet(AllocationContext){
	var counter : Integer := 1;
	self ->forEach(duplicatedAssemblyContext){
		new AllocationContext(duplicatedAssemblyContext,resourceContainer -> at(counter));
		counter := counter+1;
	}
}

/**
 * Creates a number, defined in the property numberOfReplicas, of duplicated AssemblyContexts  
 * for the loadbalancedAssemblyContext
 */
helper createDuplicatedAssemblyContexts(loadbalancedAssemblyContext : AssemblyContext) : OrderedSet(AssemblyContext){
	var counter : Integer := 1;
	var duplicatedAssemblyContextSet : OrderedSet(AssemblyContext);
	var duplicateAssemblyContext : AssemblyContext;
	while(counter < numberOfReplicas){
		duplicateAssemblyContext := new AssemblyContext(loadbalancedAssemblyContext.encapsulatedComponent__AssemblyContext);
		//apply Stereotype LoadbalancerAssemblyContext from the Loadbalanced Profile. Needed when the system should be scaled in				
		applyStereotype(duplicateAssemblyContext,duplicateAssemblyContextStereotype);
		duplicatedAssemblyContextSet +=duplicateAssemblyContext;
		counter := counter+1;
	};
	return duplicatedAssemblyContextSet;
}

/**
 * Creates  connections between the AssemblyContext, previously connected with the stereotyped AssemblyContext, and the LoadBalancer. 
 * Then it connects the LoadBalancer with the stereotyped and duplicate AssemblyContext.
 * Afterward, it connects the new AssemblyContexts with ProvidedRoles of required AssemblyContexts or a SystemOperationRequiredRole.
 */
helper connectLoadBalancerAndAssemblyContexts(loadBalancedAssemblyContext : AssemblyContext, loadBalancerAssemblyContext : AssemblyContext, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)){
	var duplicatedAssemblyContextsAndLoadBalancedAssemblyContext : OrderedSet(AssemblyContext):= duplicatedAssemblyContextSet;
	duplicatedAssemblyContextsAndLoadBalancedAssemblyContext+= loadBalancedAssemblyContext;
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	var connectors : Set(Connector) := system.connectors__ComposedStructure;
	
	connectors->forEach(connector) {
		if(connector.oclIsTypeOf(AssemblyConnector)){
			var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
			var requiringAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyConnector);
			var providingAssemblyContext : AssemblyContext := getProvidingAssemblyContext(assemblyConnector);
			if(providingAssemblyContext = loadBalancedAssemblyContext){
				var oldAssemblyConnectorProvidedInterface := assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole;
				
				//get all ProvidedRoles of the LoadBalancer component and then get this one whose interface equals the interface of the ProvidedRole of the AssemblyConnector
				var loadBalancerProvidedRoles : Set(OperationProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole);
				var commonProvidedRoleOfAssemblyConnectorAndLoadbalancer : OperationProvidedRole := loadBalancerProvidedRoles -> selectOne(providedRole : OperationProvidedRole | providedRole.providedInterface__OperationProvidedRole.id = oldAssemblyConnectorProvidedInterface.id);
				assert fatal(commonProvidedRoleOfAssemblyConnectorAndLoadbalancer != null)
					with log ("Did not find common provided role for loadbalancer "+loadBalancerAssemblyContext.entityName+" and assembly connector "+assemblyConnector.entityName+"!");
		
				//get all RequiredRoles of the LoadBalancer and select these ones whose required interface equals the provided one as the calls are forwarded to the stereotyped and duplicated component
				var loadBalancerAllRequiredRoles : Set(OperationRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity->selectByType(OperationRequiredRole);
				var loadBalancerNeededRequiredRoles : Set(OperationRequiredRole) := loadBalancerAllRequiredRoles -> select(operationRequiredRole:OperationRequiredRole|operationRequiredRole.requiredInterface__OperationRequiredRole.id=assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole.id);
				
				//change the ProvidedRole and the ProvidingAssemblyContext of the AssemblyConnector to the LoadBalancer
				assemblyConnector.providingAssemblyContext_AssemblyConnector := loadBalancerAssemblyContext;
				assemblyConnector.providedRole_AssemblyConnector := commonProvidedRoleOfAssemblyConnectorAndLoadbalancer;
				createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(oldAssemblyConnectorProvidedInterface,loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles,duplicatedAssemblyContextsAndLoadBalancedAssemblyContext);
			}
		}
		else if(connector.oclIsTypeOf(AssemblyInfrastructureConnector)){
			var assemblyInfrastructureConnector : AssemblyInfrastructureConnector := connector.oclAsType(AssemblyInfrastructureConnector);
			var requiringAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyInfrastructureConnector);
			var providingAssemblyContext : AssemblyContext := getProvidingAssemblyContext(assemblyInfrastructureConnector);
			if(providingAssemblyContext = loadBalancedAssemblyContext){
				var oldAssemblyConnectorProvidedInterface := assemblyInfrastructureConnector.providedRole__AssemblyInfrastructureConnector.providedInterface__InfrastructureProvidedRole;
				
				//get all ProvidedRoles of the LoadBalancer component and then get this one whose interface equals the interface of the ProvidedRole of the AssemblyConnector
				var loadBalancerProvidedRoles : Set(InfrastructureProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(InfrastructureProvidedRole);
				var commonProvidedRoleOfAssemblyConnectorAndLoadbalancer : InfrastructureProvidedRole := loadBalancerProvidedRoles -> selectOne(providedRole : InfrastructureProvidedRole | providedRole.providedInterface__InfrastructureProvidedRole.id = oldAssemblyConnectorProvidedInterface.id);
				assert fatal(commonProvidedRoleOfAssemblyConnectorAndLoadbalancer != null)
					with log ("Did not find common provided role for loadbalancer "+loadBalancerAssemblyContext.entityName+" and assembly connector "+assemblyInfrastructureConnector.entityName+"!");
		
				//get all RequiredRoles of the LoadBalancer and select these ones whose required interface equals the provided one as the calls are forwarded to the stereotyped and duplicated component
				var loadBalancerAllRequiredRoles : Set(InfrastructureRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity->selectByType(InfrastructureRequiredRole);
				var loadBalancerNeededRequiredRoles : Set(InfrastructureRequiredRole) := loadBalancerAllRequiredRoles -> select(infrastructureRequiredRole:InfrastructureRequiredRole|
					infrastructureRequiredRole.requiredInterface__InfrastructureRequiredRole.id=assemblyInfrastructureConnector.providedRole__AssemblyInfrastructureConnector.providedInterface__InfrastructureProvidedRole.id);
				
				//change the ProvidedRole and the ProvidingAssemblyContext of the AssemblyConnector to the LoadBalancer
				assemblyInfrastructureConnector.providingAssemblyContext__AssemblyInfrastructureConnector := loadBalancerAssemblyContext;
				assemblyInfrastructureConnector.providedRole__AssemblyInfrastructureConnector := commonProvidedRoleOfAssemblyConnectorAndLoadbalancer;
				createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(oldAssemblyConnectorProvidedInterface,loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles,duplicatedAssemblyContextsAndLoadBalancedAssemblyContext);
			}
		}
		else if(connector.oclIsTypeOf(ProvidedInfrastructureDelegationConnector)){
			var delegationConnector : ProvidedInfrastructureDelegationConnector := connector.oclAsType(ProvidedInfrastructureDelegationConnector);
			var providingAssemblyContext : AssemblyContext := getProvidingAssemblyContext(delegationConnector);
			if(providingAssemblyContext = loadBalancedAssemblyContext){
				var delegationConnectorProvidedInterface := delegationConnector.innerProvidedRole__ProvidedInfrastructureDelegationConnector.providedInterface__InfrastructureProvidedRole;
				var loadBalancerProvidedRoles : Set(InfrastructureProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(InfrastructureProvidedRole);
				var commonProvidedRoleOfDelegationConnectorAndLoadbalancer : InfrastructureProvidedRole := loadBalancerProvidedRoles -> selectOne(providedRole : InfrastructureProvidedRole| providedRole.providedInterface__InfrastructureProvidedRole.id = delegationConnectorProvidedInterface.id );
				//get all RequiredRoles of the LoadBalancer and select these ones whose required interface equals the provided one as the calls are forwarded to the stereotyped and duplicated component
				var loadBalancerAllRequiredRoles : Set(InfrastructureRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity->selectByType(InfrastructureRequiredRole);
				var loadBalancerNeededRequiredRoles : Set(InfrastructureRequiredRole) := loadBalancerAllRequiredRoles -> select(infrastructureRequiredRole:InfrastructureRequiredRole|infrastructureRequiredRole.requiredInterface__InfrastructureRequiredRole.id=delegationConnectorProvidedInterface.id);
				//change the InnerProvidedRole and the AssemblyContext of the DelegationConnector to the LoadBalancer
				delegationConnector.innerProvidedRole__ProvidedInfrastructureDelegationConnector := commonProvidedRoleOfDelegationConnectorAndLoadbalancer;
				delegationConnector.assemblyContext__ProvidedInfrastructureDelegationConnector := loadBalancerAssemblyContext;
				createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(delegationConnectorProvidedInterface,loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles,duplicatedAssemblyContextsAndLoadBalancedAssemblyContext);
			}
			
		}
		else if (connector.oclIsTypeOf(ProvidedDelegationConnector)) {
			var delegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);
			var providingAssemblyContext : AssemblyContext := getProvidingAssemblyContext(delegationConnector);
			if(providingAssemblyContext = loadBalancedAssemblyContext){
				var delegationConnectorProvidedInterface := delegationConnector.innerProvidedRole_ProvidedDelegationConnector.providedInterface__OperationProvidedRole;
				var loadBalancerProvidedRoles : Set(OperationProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole);
				var commonProvidedRoleOfDelegationConnectorAndLoadbalancer : OperationProvidedRole := loadBalancerProvidedRoles -> selectOne(providedRole : OperationProvidedRole| providedRole.providedInterface__OperationProvidedRole.id = delegationConnectorProvidedInterface.id );
				//get all RequiredRoles of the LoadBalancer and select these ones whose required interface equals the provided one as the calls are forwarded to the stereotyped and duplicated component
				var loadBalancerAllRequiredRoles : Set(OperationRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity->selectByType(OperationRequiredRole);
				var loadBalancerNeededRequiredRoles : Set(OperationRequiredRole) := loadBalancerAllRequiredRoles -> select(operationRequiredRole:OperationRequiredRole|operationRequiredRole.requiredInterface__OperationRequiredRole.id=delegationConnectorProvidedInterface.id);
				//change the InnerProvidedRole and the AssemblyContext of the DelegationConnector to the LoadBalancer
				delegationConnector.innerProvidedRole_ProvidedDelegationConnector := commonProvidedRoleOfDelegationConnectorAndLoadbalancer;
				delegationConnector.assemblyContext_ProvidedDelegationConnector := loadBalancerAssemblyContext;
				createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(delegationConnectorProvidedInterface,loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles,duplicatedAssemblyContextsAndLoadBalancedAssemblyContext);
			}
		}
	};
	//Connect the duplicated AssemblyContext with required AssemblyContexts 
	if (loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity != null){
					addRequiredRolesAssemblyConnectors(loadBalancedAssemblyContext, duplicatedAssemblyContextSet);
					addRequiredRolesSystemDelegationConnectors(loadBalancedAssemblyContext, duplicatedAssemblyContextSet);
					addRequiredRolesAssemblyInfrastructureConnectors(loadBalancedAssemblyContext, duplicatedAssemblyContextSet);
				    addRequiredRolesInfrastructureDelegationConnectors(loadBalancedAssemblyContext, duplicatedAssemblyContextSet);
	};
}

helper createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(operationInterface:OperationInterface,loadBalancerAssemblyContext : AssemblyContext,loadBalancerNeededRequiredRoles : Set(OperationRequiredRole),duplicatedAssemblyContextsAndLoadBalancedAssemblyContext : OrderedSet(AssemblyContext)){
	var counter : Integer := 1;
	loadBalancerNeededRequiredRoles -> forEach(loadBalancerNeededRequiredRole){
		var system : System := loadBalancerAssemblyContext.parentStructure__AssemblyContext![System];
		var targetAssemblyContext : AssemblyContext := duplicatedAssemblyContextsAndLoadBalancedAssemblyContext->at(counter);
		var targetAssemblyContextProvidedRoles : Set(OperationProvidedRole) := targetAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole);
		var targetAssemblyContextProvidedRole : OperationProvidedRole := targetAssemblyContextProvidedRoles -> selectOne(op:OperationProvidedRole|op.providedInterface__OperationProvidedRole.id = operationInterface.id);
		if(system.connectors__ComposedStructure[AssemblyConnector]->select(assemblyConnector | 
																		assemblyConnector.providingAssemblyContext_AssemblyConnector.id = targetAssemblyContext.id 
																		and assemblyConnector.requiringAssemblyContext_AssemblyConnector.id = loadBalancerAssemblyContext.id 
																		and assemblyConnector.providedRole_AssemblyConnector.id = targetAssemblyContextProvidedRole.id
																		and assemblyConnector.requiredRole_AssemblyConnector.id = loadBalancerNeededRequiredRole.id)->isEmpty()){
			new AssemblyConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRole,targetAssemblyContextProvidedRole,targetAssemblyContext);		
		};				
		targetAssemblyContextProvidedRoles := targetAssemblyContextProvidedRoles->excluding(targetAssemblyContextProvidedRole);
		counter:=counter+1;
	};
}

helper createAssemblyConnectorsBetweenLoadbalancerAndLoadbalancedAssemblyContexts(infrastructureInterface:InfrastructureInterface,loadBalancerAssemblyContext : AssemblyContext,loadBalancerNeededRequiredRoles : Set(InfrastructureRequiredRole),duplicatedAssemblyContextsAndLoadBalancedAssemblyContext : OrderedSet(AssemblyContext)){
	var counter : Integer := 1;
	loadBalancerNeededRequiredRoles -> forEach(loadBalancerNeededRequiredRole){
		var system : System := loadBalancerAssemblyContext.parentStructure__AssemblyContext![System];
		var targetAssemblyContext : AssemblyContext := duplicatedAssemblyContextsAndLoadBalancedAssemblyContext->at(counter);
		var targetAssemblyContextProvidedRoles : Set(InfrastructureProvidedRole) := targetAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->selectByType(InfrastructureProvidedRole);
		var targetAssemblyContextProvidedRole : InfrastructureProvidedRole := targetAssemblyContextProvidedRoles -> selectOne(op:InfrastructureProvidedRole|op.providedInterface__InfrastructureProvidedRole.id = infrastructureInterface.id);
		if(system.connectors__ComposedStructure[AssemblyInfrastructureConnector]->select(assemblyInfrastructureConnector | 
																						assemblyInfrastructureConnector.providingAssemblyContext__AssemblyInfrastructureConnector.id = targetAssemblyContext.id 
																						and assemblyInfrastructureConnector.requiringAssemblyContext__AssemblyInfrastructureConnector.id = loadBalancerAssemblyContext.id
																						and assemblyInfrastructureConnector.providedRole__AssemblyInfrastructureConnector.id = targetAssemblyContextProvidedRole.id
																						and assemblyInfrastructureConnector.requiredRole__AssemblyInfrastructureConnector.id = loadBalancerNeededRequiredRole.id)->isEmpty()){
			new AssemblyInfrastructureConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRole,targetAssemblyContextProvidedRole,targetAssemblyContext);	
		};					
		targetAssemblyContextProvidedRoles := targetAssemblyContextProvidedRoles->excluding(targetAssemblyContextProvidedRole);
		counter:=counter+1;
	}
}

/**
 * Creates an AssemblyConnector for each of the duplicated AssemblyContext in duplicatedAssemblyContextSet to 
 * an OperationRequiredRole specified by the loadBalancedAssemblyContext
 */
helper addRequiredRolesAssemblyConnectors(loadBalancedAssemblyContext : AssemblyContext, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var assemblyConnectors : Collection(AssemblyConnector) := system.connectors__ComposedStructure ->selectByType(AssemblyConnector);
	var loadBalancedRequiredRoles : Set(RequiredRole) := loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleLoadBalancedAssemblyContextConnectors : Collection(AssemblyConnector) := assemblyConnectors -> select(assemblyConnector : AssemblyConnector | loadBalancedRequiredRoles -> includes(assemblyConnector.requiredRole_AssemblyConnector));
	requiredRoleLoadBalancedAssemblyContextConnectors -> forEach(assemblyConnector){
		duplicatedAssemblyContextSet ->forEach(duplicatedAssemblyContext){
			new AssemblyConnector(duplicatedAssemblyContext,assemblyConnector.requiredRole_AssemblyConnector,assemblyConnector.providedRole_AssemblyConnector,assemblyConnector.providingAssemblyContext_AssemblyConnector);
			
		}
	};
};

/**
 * Creates an AssemblyInfrastructureConnector for each of the duplicated AssemblyContext in duplicatedAssemblyContextSet to 
 * an InfrastructureRequiredRole specified by the loadBalancedAssemblyContext
 */
helper addRequiredRolesAssemblyInfrastructureConnectors(loadBalancedAssemblyContext : AssemblyContext, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var assemblyInfrastructureConnectors : Collection(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure ->selectByType(AssemblyInfrastructureConnector);
	var loadBalancedRequiredRoles : Set(RequiredRole) := loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleLoadBalancedAssemblyContextConnectors : Collection(AssemblyInfrastructureConnector) := assemblyInfrastructureConnectors -> select(assemblyInfrastructureConnector : AssemblyInfrastructureConnector | loadBalancedRequiredRoles -> includes(assemblyInfrastructureConnector.requiredRole__AssemblyInfrastructureConnector));
	requiredRoleLoadBalancedAssemblyContextConnectors -> forEach(assemblyConnector){
		duplicatedAssemblyContextSet ->forEach(duplicatedAssemblyContext){
			new AssemblyInfrastructureConnector(duplicatedAssemblyContext,assemblyConnector.requiredRole__AssemblyInfrastructureConnector,assemblyConnector.providedRole__AssemblyInfrastructureConnector,assemblyConnector.providingAssemblyContext__AssemblyInfrastructureConnector);
			
		}
	};
};

/**
 * Creates a RequiredSystemDelegationConnector for each of the duplicated AssemblyContext in duplicatedAssemblyContextSet to 
 * the SystemOperationRequiredRole specified by the loadBalancedAssemblyContext
 */
helper addRequiredRolesSystemDelegationConnectors(loadBalancedAssemblyContext : AssemblyContext, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var delegationConnectors : Collection(RequiredDelegationConnector) := system.connectors__ComposedStructure -> selectByType(RequiredDelegationConnector);
	var loadBalancedRequiredRoles : Set(RequiredRole) := loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleLoadBalancedAssemblyContextDelegationConnectors : Collection(RequiredDelegationConnector) := delegationConnectors -> select(delegationConnector : RequiredDelegationConnector | loadBalancedRequiredRoles -> includes(delegationConnector.innerRequiredRole_RequiredDelegationConnector));
	requiredRoleLoadBalancedAssemblyContextDelegationConnectors -> forEach(delegationConnector){
	duplicatedAssemblyContextSet ->forEach(duplicatedAssemblyContext){
		new RequiredDelegationConnector(duplicatedAssemblyContext,delegationConnector.innerRequiredRole_RequiredDelegationConnector,delegationConnector.outerRequiredRole_RequiredDelegationConnector);
		}
	};
};

/**
 * Creates a RequiredInfrastructureDelegationConnector for each of the duplicated AssemblyContext in duplicatedAssemblyContextSet to 
 * the InfrastructureRequiredRole specified by the loadBalancedAssemblyContext
 */
helper addRequiredRolesInfrastructureDelegationConnectors(loadBalancedAssemblyContext : AssemblyContext, duplicatedAssemblyContextSet : OrderedSet(AssemblyContext)){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var delegationConnectors : Collection(RequiredInfrastructureDelegationConnector) := system.connectors__ComposedStructure -> selectByType(RequiredInfrastructureDelegationConnector);
	var loadBalancedRequiredRoles : Set(RequiredRole) := loadBalancedAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleLoadBalancedAssemblyContextDelegationConnectors : Collection(RequiredInfrastructureDelegationConnector) := delegationConnectors -> select(delegationConnector : RequiredInfrastructureDelegationConnector | loadBalancedRequiredRoles -> includes(delegationConnector.innerRequiredRole__RequiredInfrastructureDelegationConnector));
	requiredRoleLoadBalancedAssemblyContextDelegationConnectors -> forEach(delegationConnector){
	duplicatedAssemblyContextSet ->forEach(duplicatedAssemblyContext){
		new RequiredInfrastructureDelegationConnector(duplicatedAssemblyContext,delegationConnector.innerRequiredRole__RequiredInfrastructureDelegationConnector,delegationConnector.outerRequiredRole__RequiredInfrastructureDelegationConnector);
		}
	};
};

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedInfrastructureDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext__ProvidedInfrastructureDelegationConnector;
}

/**
 * Returns the requiring component of a given connector.
 */
query getRequiringAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.requiringAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Returns the requiring component of a given connector.
 */
query getRequiringAssemblyContext(assemblyInfrastructureConnector : AssemblyInfrastructureConnector) : AssemblyContext {
	return assemblyInfrastructureConnector.requiringAssemblyContext__AssemblyInfrastructureConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(assemblyInfrastructureConnector : AssemblyInfrastructureConnector) : AssemblyContext {
	return assemblyInfrastructureConnector.providingAssemblyContext__AssemblyInfrastructureConnector;
}

/** Returns a new ResourceContainer that equals the ResourceContainer specifications'' of the input parameter. It is also connected with the same LinkingResource
*/
helper createResourceContainerAndConnectionToLinkingResources(originalResourceContainer:ResourceContainer, name:String):ResourceContainer{
	var resourceContainer : ResourceContainer := new ResourceContainer(originalResourceContainer,name);
	var resourceContainerLinkingResources :=
			originalResourceContainer.resourceEnvironment_ResourceContainer.linkingResources__ResourceEnvironment 
			-> select( l :LinkingResource |
				l.connectedResourceContainers_LinkingResource
				->includes(originalResourceContainer)
			);
	//create a LinkingResource in the ResourcesEnvironment when none exists
	//FIXME: parameters of latency and throughput for the CommunicationLinkResourceSpecification should be changed, or they should be defined by the user
	if (resourceContainerLinkingResources->isEmpty()){
		resourceContainerLinkingResources += new LinkingResource(originalResourceContainer,"0","10000");
	};
	
	resourceContainerLinkingResources
		->forEach(linkingResource){
			linkingResource.connectedResourceContainers_LinkingResource += resourceContainer;
		};
	
	return resourceContainer;
};

constructor RequiredDelegationConnector :: RequiredDelegationConnector(assemblyContext : AssemblyContext, innerRequiredRole : OperationRequiredRole, outerRequiredRole : OperationRequiredRole){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	entityName := "RequiredDelegation " + innerRequiredRole.entityName + "_" + outerRequiredRole.entityName;
	assemblyContext_RequiredDelegationConnector := assemblyContext;
	innerRequiredRole_RequiredDelegationConnector := innerRequiredRole;
	outerRequiredRole_RequiredDelegationConnector := outerRequiredRole;
	parentStructure__Connector := system;
}

constructor RequiredInfrastructureDelegationConnector :: RequiredInfrastructureDelegationConnector(assemblyContext : AssemblyContext, innerRequiredRole : InfrastructureRequiredRole, outerRequiredRole : InfrastructureRequiredRole){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	entityName := "RequiredDelegation " + innerRequiredRole.entityName + "_" + outerRequiredRole.entityName;
	assemblyContext__RequiredInfrastructureDelegationConnector := assemblyContext;
	innerRequiredRole__RequiredInfrastructureDelegationConnector := innerRequiredRole;
	outerRequiredRole__RequiredInfrastructureDelegationConnector := outerRequiredRole;
	parentStructure__Connector := system;
}

constructor AssemblyConnector :: AssemblyConnector(requiringAssemblyContext : AssemblyContext,requiredRole:OperationRequiredRole, providedRole: OperationProvidedRole, providingAssemblyContext : AssemblyContext){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
	providingAssemblyContext_AssemblyConnector := providingAssemblyContext;
	requiringAssemblyContext_AssemblyConnector := requiringAssemblyContext;
	providedRole_AssemblyConnector := providedRole;
	requiredRole_AssemblyConnector := requiredRole;
	parentStructure__Connector := system;
}

constructor AssemblyInfrastructureConnector :: AssemblyInfrastructureConnector(requiringAssemblyContext : AssemblyContext,requiredRole:InfrastructureRequiredRole, providedRole: InfrastructureProvidedRole, providingAssemblyContext : AssemblyContext){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
	providingAssemblyContext__AssemblyInfrastructureConnector := providingAssemblyContext;
	requiringAssemblyContext__AssemblyInfrastructureConnector := requiringAssemblyContext;
	providedRole__AssemblyInfrastructureConnector := providedRole;
	requiredRole__AssemblyInfrastructureConnector := requiredRole;
	parentStructure__Connector := system;
}

constructor LinkingResource :: LinkingResource (resourceContainer : ResourceContainer, latency : String, throughput : String){
	connectedResourceContainers_LinkingResource := resourceContainer;
	resourceEnvironment_LinkingResource := resourceContainer.resourceEnvironment_ResourceContainer;
	communicationLinkResourceSpecifications_LinkingResource := new CommunicationLinkResourceSpecification(resourceContainer,latency,throughput);
}

constructor CommunicationLinkResourceSpecification :: CommunicationLinkResourceSpecification(resourceContainer : ResourceContainer, latency : String, throughput : String){
	latency_CommunicationLinkResourceSpecification := new PCMRandomVariable(latency);
	throughput_CommunicationLinkResourceSpecification := new PCMRandomVariable(throughput);
	communicationLinkResourceType_CommunicationLinkResourceSpecification := resourceContainer.activeResourceSpecifications_ResourceContainer.activeResourceType_ActiveResourceSpecification.resourceRepository_ResourceType.availableResourceTypes_ResourceRepository->selectByType(CommunicationLinkResourceType)->selectOne(resourceType : ResourceType |resourceType.id = "_o3sScH2AEdyH8uerKnHYug");
}

constructor AllocationContext :: AllocationContext (ac : AssemblyContext, rc: ResourceContainer){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	entityName := "Allocation_" + ac.entityName;
	assemblyContext_AllocationContext := ac;
	resourceContainer_AllocationContext := rc;
	allocation_AllocationContext := allocation;
}

constructor ProcessingResourceSpecification:: ProcessingResourceSpecification(p:ProcessingResourceSpecification, rc : ResourceContainer){
	MTTF := p.MTTF;
	MTTR := p.MTTR;
	schedulingPolicy := p.schedulingPolicy;
	requiredByContainer := p.requiredByContainer;
	processingRate_ProcessingResourceSpecification := new PCMRandomVariable(p.processingRate_ProcessingResourceSpecification);
	numberOfReplicas := p.numberOfReplicas;
	activeResourceType_ActiveResourceSpecification := p.activeResourceType_ActiveResourceSpecification;
	resourceContainer_ProcessingResourceSpecification := rc;
}

/**Creates a PCMRandomVariable from an existing PCMRandomVariable
*/
constructor PCMRandomVariable :: PCMRandomVariable(pcmRandomVariable:PCMRandomVariable){
	specification := pcmRandomVariable.specification;
}

/**Creates a PCMRandomVariable with a specified input parameter
*/
constructor PCMRandomVariable :: PCMRandomVariable(spec:String){
	specification := spec;
}

constructor ResourceContainer :: ResourceContainer(originalResourceContainer : ResourceContainer, rcName : String){
	entityName := originalResourceContainer.entityName + rcName;
	resourceEnvironment_ResourceContainer := originalResourceContainer.resourceEnvironment_ResourceContainer;
	
	if(originalResourceContainer.nestedResourceContainers__ResourceContainer->size()>0)	{
		nestedResourceContainers__ResourceContainer := originalResourceContainer.duplicateNestedResourceContainer();
	};
	
	activeResourceSpecifications_ResourceContainer += originalResourceContainer.activeResourceSpecifications_ResourceContainer -> forEach(activeResource){
		new ProcessingResourceSpecification(activeResource, result);
	};
} 

helper ResourceContainer::duplicateNestedResourceContainer():Set(ResourceContainer){
	var nestedResourceContainer : Set(ResourceContainer);
	self.nestedResourceContainers__ResourceContainer->forEach(rc){
		nestedResourceContainer += new ResourceContainer(rc, rc.entityName);	
	};

	return nestedResourceContainer;
}

constructor AssemblyContext :: AssemblyContext(bc : RepositoryComponent) {
	entityName := "Assembly_"+bc.entityName;
	encapsulatedComponent__AssemblyContext := bc;
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	parentStructure__AssemblyContext := system;
}

constructor BasicComponent :: BasicComponent (loadBalancedComponent : RepositoryComponent)
{
	var repository := loadBalancedComponent.repository__RepositoryComponent;
	var providedRoles : Set(ProvidedRole) := loadBalancedComponent.providedRoles_InterfaceProvidingEntity;
	entityName := "LoadBalancer_"+ loadBalancedComponent.entityName;
	repository__RepositoryComponent := repository;
	providedRoles -> forEach(providedRole){
		if(providedRole.oclIsTypeOf(OperationProvidedRole)){
			var counter : Integer := 1;
			providedRoles_InterfaceProvidingEntity += new OperationProvidedRole(providedRole.oclAsType(OperationProvidedRole));
			while(counter<= (numberOfReplicas)){
				requiredRoles_InterfaceRequiringEntity += new OperationRequiredRole(providedRole.oclAsType(OperationProvidedRole),counter);
				counter := counter+1;
			};
		}else if(providedRole.oclIsTypeOf(InfrastructureProvidedRole)){
			var counter : Integer := 1;
			providedRoles_InterfaceProvidingEntity += new InfrastructureProvidedRole(providedRole.oclAsType(InfrastructureProvidedRole));
			while(counter<= (numberOfReplicas)){
				requiredRoles_InterfaceRequiringEntity += new InfrastructureRequiredRole(providedRole.oclAsType(InfrastructureProvidedRole),counter);
				counter := counter+1;
			};
		};
	};
	
	componentParameterUsage_ImplementationComponentType := loadBalancedComponent[ImplementationComponentType].componentParameterUsage_ImplementationComponentType;
	
	providedRoles_InterfaceProvidingEntity -> forEach(providedRole){
	if(providedRole.oclIsTypeOf(OperationProvidedRole)){
		var operationProvidedRole := providedRole.oclAsType(OperationProvidedRole);
		var operationInterface := operationProvidedRole.providedInterface__OperationProvidedRole;
		var operationRequiredRoles : Set(OperationRequiredRole) := requiredRoles_InterfaceRequiringEntity ->selectByType(OperationRequiredRole);
		var requiredRolesWithSameInterfaceAsProvidedRole : Set(OperationRequiredRole) := operationRequiredRoles -> select(operationRequiredRole : OperationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = operationInterface.id);
		operationInterface.signatures__OperationInterface->forEach(operationSignature){
	  		serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(operationSignature, requiredRolesWithSameInterfaceAsProvidedRole);
		};
		}else if(providedRole.oclIsTypeOf(InfrastructureProvidedRole)){
			var infrastructureProvidedRole := providedRole.oclAsType(InfrastructureProvidedRole);
			var infrastructureInterface := infrastructureProvidedRole.providedInterface__InfrastructureProvidedRole;
			var infrastructureRequiredRoles : Set(InfrastructureRequiredRole) := requiredRoles_InterfaceRequiringEntity ->selectByType(InfrastructureRequiredRole);
			var requiredRolesWithSameInterfaceAsProvidedRole : Set(InfrastructureRequiredRole) := infrastructureRequiredRoles -> select(infrastructureRequiredRole : InfrastructureRequiredRole | infrastructureRequiredRole.requiredInterface__InfrastructureRequiredRole.id = infrastructureInterface.id);
			infrastructureInterface.infrastructureSignatures__InfrastructureInterface->forEach(infrastructureSignature){
  				serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(infrastructureSignature, requiredRoles_InterfaceRequiringEntity[InfrastructureRequiredRole]);
	};
		};
	}
}

constructor ResourceDemandingSEFF :: ResourceDemandingSEFF (operationSignature : OperationSignature, requiredRoles : Set(OperationRequiredRole)){
	describedService__SEFF := operationSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "LoadBalancer Branch";
		predecessor_AbstractAction := startAction;
		
		requiredRoles->forEach(requiredRole){
		    var probability : Real := 1.0 / requiredRoles->size();
			branches_Branch += object ProbabilisticBranchTransition{
			    entityName := "Branch for "+requiredRole.entityName;
			    branchProbability := probability;
			    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
			    	var innerStartAction : StartAction := object StartAction{};
			    	var delegatingExternalCallAction : DelegatingExternalCallAction := object DelegatingExternalCallAction{
			    		predecessor_AbstractAction := innerStartAction;
			    		entityName := "Call "+operationSignature.entityName;
			    		role_ExternalService := requiredRole;
			    		calledService_ExternalService := operationSignature;
			    	};
			    	var innerStopAction : StopAction := object StopAction{
						predecessor_AbstractAction := delegatingExternalCallAction;
					};
					
					steps_Behaviour += innerStartAction;
					steps_Behaviour += delegatingExternalCallAction;
					steps_Behaviour += innerStopAction;
			    };
			};
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}

constructor ResourceDemandingSEFF::ResourceDemandingSEFF (infrastructureSignature : InfrastructureSignature, requiredRoles : Set(InfrastructureRequiredRole)){
	describedService__SEFF := infrastructureSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "LoadBalancer Branch";
		predecessor_AbstractAction := startAction;
		
		requiredRoles->forEach(requiredRole){
		    var probability : Real := 1.0 / requiredRoles->size();
			branches_Branch += object ProbabilisticBranchTransition{
			    entityName := "Branch for "+requiredRole.entityName;
			    branchProbability := probability;
			    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
			    	var innerStartAction : StartAction := object StartAction{};
			    	var internalCallAction : InternalAction:= object InternalAction{
			    		entityName := "Call "+infrastructureSignature.entityName;
			    		predecessor_AbstractAction := innerStartAction;
			    		infrastructureCall__Action := object InfrastructureCall{
			    			entityName := "InfrastructureCall " + requiredRole.entityName;
			    			signature__InfrastructureCall := infrastructureSignature;
			    			requiredRole__InfrastructureCall := requiredRole;
			    			numberOfCalls__InfrastructureCall := new PCMRandomVariable("1");
			    		};
			    	};
			    	var innerStopAction : StopAction := object StopAction{
						predecessor_AbstractAction := internalCallAction;
					};
					
					steps_Behaviour += innerStartAction;
					steps_Behaviour += internalCallAction;
					steps_Behaviour += innerStopAction;
			    };
			};
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}	

constructor OperationProvidedRole :: OperationProvidedRole(pr:OperationProvidedRole){
	entityName := "Provided_" + pr.providedInterface__OperationProvidedRole.entityName + "_LoadBalancer";
	providedInterface__OperationProvidedRole := pr.providedInterface__OperationProvidedRole;
}

constructor OperationRequiredRole :: OperationRequiredRole(rr:OperationProvidedRole, i:Integer){
	entityName := "Required_" + rr.providedInterface__OperationProvidedRole.entityName +"_LoadBalancer_"+i.toString();
	requiredInterface__OperationRequiredRole := rr.providedInterface__OperationProvidedRole;
}

constructor InfrastructureProvidedRole::InfrastructureProvidedRole(providedRole : InfrastructureProvidedRole){
	entityName := "Provided_" + providedRole.providedInterface__InfrastructureProvidedRole.entityName + "_LoadBalancer";
	providedInterface__InfrastructureProvidedRole := providedRole.providedInterface__InfrastructureProvidedRole;
}

constructor InfrastructureRequiredRole::InfrastructureRequiredRole(providedRole : InfrastructureProvidedRole, counter : Integer){
	entityName := "Required_" + providedRole.providedInterface__InfrastructureProvidedRole.entityName +"_LoadBalancer_"+counter.toString();
	requiredInterface__InfrastructureRequiredRole := providedRole.providedInterface__InfrastructureProvidedRole;
}
